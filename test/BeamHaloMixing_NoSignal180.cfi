 # this example configuration offers some minimum
   # annotation, to help users get through; please
   # don't hesitate to read through the comments


   # use MessageLogger to redirect/suppress multiple
   # service messages coming from the system
   #
   # in this config below, we use the replace option to make
   # the logger let out messages of severity ERROR (INFO level
   # will be suppressed), and we want to limit the number to 10
   #
   include "Configuration/ReleaseValidation/data/Services.cff"
   include "Configuration/StandardSequences/data/FakeConditions.cff"
   include "FWCore/MessageService/data/MessageLogger.cfi"

   # in you wish to quiet the logger even more and leave in
   # only info from the Framework, use config example below :
   #
   #service = MessageLogger
   #{
   #   untracked vstring destinations = {"cout"}
   #   untracked vstring categories = { "FwkJob" }
   #   untracked PSet cout =
   #   {
   #      untracked PSet default = { untracked int32 limit = 0 }  # kill all messages in the log
   #      untracked PSet FwkJob  = { untracked int32 limit = -1 } # but FwkJob category - those unlimitted
   #   }
   #}

   # an example of "source", flat-energy single electron gun in this case
   #
   source = FlatRandomEGunSource
   {
       untracked PSet PGunParameters =
       {
           # you can request more than 1 particle
           # since PartID is a vector, you can place in as many
           # PDG id's as you wish, comma seaparated
           #
           untracked vint32 PartID = { 11}
           untracked double MinEta = -2.7
           untracked double MaxEta = 2.7
           untracked double MinPhi = -3.14159265358979323846 # in radians
           untracked double MaxPhi =  3.14159265358979323846
           untracked double MinE  = 10.
           untracked double MaxE  = 10.
       }
       untracked bool AddAntiParticle = true # back-to-back particles
       untracked int32 Verbosity = 0 # set to 1 (or greater)  for printouts
  }

   # this config frament brings you the generator information

   include "Configuration/StandardSequences/data/Generator.cff"

   # this config frament brings you 3 steps of the detector simulation:
   # -- vertex smearing (IR modeling)
   # -- G4-based hit level detector simulation
   # -- digitization (electronics readout modeling)
   # it returns 2 sequences :
   # -- psim (vtx smearing + G4 sim)
   # -- pdigi (digitization in all subsystems, i.e. tracker=pix+sistrips,
   #           cal=ecal+ecal-0-suppression+hcal), muon=csc+dt+rpc)
   #
   include "Configuration/StandardSequences/data/Simulation.cff"

   # please note the IMPORTANT:
   # in order to operate Digis, one needs to include Mixing module
   # (pileup modeling), at least in the 0-pileup mode
   #
   # There're 3 possible configurations of the Mixing module :
   # no-pileup, low luminosity pileup, and high luminosity pileup
   #
   # they come, respectively, through the 3 config fragments below
   #
   # *each* config returns label "mix"; thus you canNOT have them
   # all together in the same configuration, but only one !!!
   #

   include "Configuration/StandardSequences/data/L1Emulator.cff"

   include "Configuration/StandardSequences/data/DigiToRaw.cff"

   include "Configuration/StandardSequences/data/VtxSmearedBetafuncEarlyCollision.cff"

   include "Configuration/StandardSequences/data/Reconstruction.cff"
   #
   # You can set Mag Field to 0
   #
   #include "Configuration/StandardSequences/data/UseZeroBField.cff"

   path p0 = {pgen} # generator
   path p1 = {psim} # simulation
   path p2 = {pdigi} # digitization
   path p3 = {L1Emulator}
   path p4 = {DigiToRaw}
   path p5 = {reconstruction} # reconstruction

   # Event output
   include "Configuration/EventContent/data/EventContent.cff"
   module FEVT = PoolOutputModule
   {
       using FEVTSIMEventContent
       untracked string fileName = "BeamHalo.root"
   }

   endpath outpath = {FEVT}

   schedule = {p0,p1,p2,p3,p4,p5,outpath}

