process Sim =
{
    untracked PSet maxEvents = {untracked int32 input = 1}
    # this example configuration offers some minimum
    # annotation, to help users get through; please
    # don't hesitate to read through the comments
    
    
    # use MessageLogger to redirect/suppress multiple
    # service messages coming from the system
    #
    # in this config below, we use the replace option to make
    # the logger let out messages of severity ERROR (INFO level
    # will be suppressed), and we want to limit the number to 10
    #
    include "Configuration/ReleaseValidation/data/Services.cff"
    include "Configuration/StandardSequences/data/FakeConditions.cff" 
    include "FWCore/MessageService/data/MessageLogger.cfi"
    
    # in you wish to quiet the logger even more and leave in
    # only info from the Framework, use config example below :
    #
/*
    service = MessageLogger
    {
       untracked vstring destinations = {"cout"}
       untracked vstring categories = { "FwkJob" }
       untracked PSet cout =
       {
          untracked PSet default = { untracked int32 limit = 0 }  # kill all messages in the log
          untracked PSet FwkJob  = { untracked int32 limit = -1 } # but FwkJob category - those unlimitted
       }
    }
*/    
    # an example of "source", read a pre-generated event sample
    #

   source = BeamHaloSource
   {
         untracked int32 GENMOD = 3
         untracked int32 LHC_B1 = 0
         untracked int32 LHC_B2 = 1
         untracked int32 IW_MUO = 1
         untracked int32 IW_HAD = 0
         untracked int32 OFFSET = 0
         untracked double EG_MIN = 10.
         untracked double EG_MAX = 7000.
         untracked double W0 = 2229585
         untracked string G3FNAME = "bgas.123"

         untracked int32 shift_bx  = 0   // e.g. -2, -1 for previous bunch-crossing
         untracked double BXNS = 25.      // time between 2 bx's, in ns
   }

    # this config frament brings you 3 steps of the detector simulation:
    # -- vertex smearing (IR modeling)
    # -- G4-based hit level detector simulation
    # -- digitization (electronics readout modeling)
    # it returns 2 sequences :
    # -- psim (vtx smearing + G4 sim)
    # -- pdigi (digitization in all subsystems, i.e. tracker=pix+sistrips,
    #           cal=ecal+ecal-0-suppression+hcal), muon=csc+dt+rpc)
    #
    include "Configuration/StandardSequences/data/Generator.cff"
    include "Configuration/StandardSequences/data/Simulation.cff"
    include "GeneratorInterface/BeamHaloGenerator/test/ForwardShielding.cfi"  
    # Vertex smearing
    #
    # There're 3 types of Vertex smearing module (Gauss, Flat, BeamProfile);
    # the cff's are available for each one :
    # Configuration/StandardSequences/data/VtxSmearedGauss.cff
    # Configuration/StandardSequences/data/VtxSmearedNoSmear.cff
    # Configuration/StandardSequences/data/VtxSmearedFlat.cff
    # Configuration/StandardSequences/data/VtxSmearedBeamPreofile.cff
    # Currently, we suggest using Gaussian vertex smearing
    
    include "Configuration/StandardSequences/data/VtxSmearedBetafuncEarlyCollision.cff"
    #include "Configuration/StandardSequences/data/VtxSmearedGauss.cff"
    #include "Configuration/StandardSequences/data/VtxSmearedNoSmear.cff"
    #include "Configuration/StandardSequences/data/VtxSmearedFlat.cff"
    #include "Configuration/StandardSequences/data/VtxSmearedBeamProfile.cff"
    path p0 = {pgen} # generator
    path p1 = {psim} # simulation

    
    # Event output
    include "Configuration/EventContent/data/EventContent.cff"
    module FEVT = PoolOutputModule
    {
        using FEVTSIMEventContent
        untracked string fileName = " sim.root"
    }
    
    endpath outpath = {FEVT}
    
    schedule = {p0,p1,outpath}
}

